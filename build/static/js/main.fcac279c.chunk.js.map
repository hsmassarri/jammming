{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["userToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","handleKeyPress","onSearch","event","setState","target","value","key","react_default","a","createElement","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","id","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","spotifyUrl","concat","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","accessToken","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","items","artists","uri","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","current","_this2","_this3","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcac279c.chunk.js","sourcesContent":["const clientId = 'e636f4fb88044998b7ec407c8a4a0c0b';\nconst redirectUri = 'https://riffthrone.surge.sh';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\nlet userToken;\n\nconst Spotify = {\n\n  getAccessToken() {\n      if(userToken) {\n        return userToken;\n      }\n      const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n      const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n      if(hasAccessToken && hasExpiresIn) {\n        userToken = hasAccessToken[1];\n        const expiresIn = Number(hasExpiresIn[1]);\n        window.setTimeout( () => userToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return userToken;\n      }\n      else {\n        const accessUrl = spotifyUrl;\n        window.location = accessUrl;\n      }\n  },\n\n\n\n\n\n  //Uses access token to return a response from the Spotify API user the search term from the SearchBar\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(\n      response => {\n        if (response.ok) {\n          return response.json();\n        }\n        else {\n          console.log('API request fail');\n        }\n      }).then(\n          jsonResponse => {\n            if(!jsonResponse.tracks) {\n              return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri,\n            }));\n      });\n    },\n\n\n\n\n\n    //Gets users ID from Spotify, creates a new playlist on user account, add tracks to that playListTracks\n    savePlaylist(playlistName, trackURIs) {\n      if (!playlistName || !trackURIs.length) {\n        return;\n      }\n\n\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n\n      let userId;\n\n      //Return user ID from SPOTIFY\n      return fetch('https://api.spotify.com/v1/me', {\n        headers: headers\n      }).then(response => {\n        if(response.ok) {\n          return response.json();\n        }\n      }).then(\n        jsonResponse => {\n          userId = jsonResponse.id;\n\n          //Add playlist to user accounts\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: playlistName})\n          }).then(\n              response => {\n                if(response.ok) {\n                  return response.json();\n                }\n                else {\n                  console.log('API request fail');\n                }\n          }).then(\n              jsonResponse => {\n                const playlistId = jsonResponse.id;\n\n                //Add track to NEW playlist\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                  headers: headers,\n                  method: 'POST',\n                  body: JSON.stringify({uris: trackURIs})\n                });\n            });\n      });\n    }\n}\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {term: ''};\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  handleKeyPress(event) {\n    if(event.key === 'Enter') {\n      this.search();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} onKeyPress={this.handleKeyPress}/>\n        <a onClick={this.search}>SEARCH</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <a className='Track-action' onClick={this.removeTrack}>-</a>;\n    }\n    else {\n      return <a className='Track-action' onClick={this.addTrack}>+</a>;\n    }\n  }\n  render() {\n    return(\n      <div className=\"Track\" key={this.props.track.id}>\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return(\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track key={track.id}\n                          track={track}\n                          onAdd={this.props.onAdd}\n                          onRemove={this.props.onRemove}\n                          isRemoval={this.props.isRemoval}\n                          tracks={this.props.tracks} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList  tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input  defaultValue={this.props.playlistName}\n                onChange={this.handleNameChange} />\n        <TrackList  tracks={this.props.playlistTracks}\n                    isRemoval={true}\n                    onRemove={this.props.onRemove} />\n        <a  className=\"Playlist-save\"\n            onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  // Add a song to the playlistTracks state\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  // Remove a song from the playlistTracks state\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(current => current.id !== track.id); //leave the ones we want in the playlist\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then( () => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults  searchResults={this.state.searchResults}\n                            onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}